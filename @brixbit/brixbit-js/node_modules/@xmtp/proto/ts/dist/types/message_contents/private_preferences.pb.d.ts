import Long from "long";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "xmtp.message_contents";
/**
 * Private Key Storage
 *
 * Following definitions are not used in the protocol, instead
 * they provide a way for encoding private keys for storage.
 */
/**
 * PrivatePreferencesAction is a message used to update the client's
 * preference store. The only current actions are allow and block.
 * Other actions may be added later
 */
export interface PrivatePreferencesAction {
    allow: PrivatePreferencesAction_Allow | undefined;
    block: PrivatePreferencesAction_Block | undefined;
}
/** Add the given wallet addresses to the allow list */
export interface PrivatePreferencesAction_Allow {
    walletAddresses: string[];
}
/** Add the given wallet addresses to the block list */
export interface PrivatePreferencesAction_Block {
    walletAddresses: string[];
}
export declare const PrivatePreferencesAction: {
    encode(message: PrivatePreferencesAction, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PrivatePreferencesAction;
    fromJSON(object: any): PrivatePreferencesAction;
    toJSON(message: PrivatePreferencesAction): unknown;
    fromPartial<I extends {
        allow?: {
            walletAddresses?: string[] | undefined;
        } | undefined;
        block?: {
            walletAddresses?: string[] | undefined;
        } | undefined;
    } & {
        allow?: ({
            walletAddresses?: string[] | undefined;
        } & {
            walletAddresses?: (string[] & string[] & { [K in Exclude<keyof I["allow"]["walletAddresses"], keyof string[]>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["allow"], "walletAddresses">]: never; }) | undefined;
        block?: ({
            walletAddresses?: string[] | undefined;
        } & {
            walletAddresses?: (string[] & string[] & { [K_2 in Exclude<keyof I["block"]["walletAddresses"], keyof string[]>]: never; }) | undefined;
        } & { [K_3 in Exclude<keyof I["block"], "walletAddresses">]: never; }) | undefined;
    } & { [K_4 in Exclude<keyof I, keyof PrivatePreferencesAction>]: never; }>(object: I): PrivatePreferencesAction;
};
export declare const PrivatePreferencesAction_Allow: {
    encode(message: PrivatePreferencesAction_Allow, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PrivatePreferencesAction_Allow;
    fromJSON(object: any): PrivatePreferencesAction_Allow;
    toJSON(message: PrivatePreferencesAction_Allow): unknown;
    fromPartial<I extends {
        walletAddresses?: string[] | undefined;
    } & {
        walletAddresses?: (string[] & string[] & { [K in Exclude<keyof I["walletAddresses"], keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "walletAddresses">]: never; }>(object: I): PrivatePreferencesAction_Allow;
};
export declare const PrivatePreferencesAction_Block: {
    encode(message: PrivatePreferencesAction_Block, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PrivatePreferencesAction_Block;
    fromJSON(object: any): PrivatePreferencesAction_Block;
    toJSON(message: PrivatePreferencesAction_Block): unknown;
    fromPartial<I extends {
        walletAddresses?: string[] | undefined;
    } & {
        walletAddresses?: (string[] & string[] & { [K in Exclude<keyof I["walletAddresses"], keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "walletAddresses">]: never; }>(object: I): PrivatePreferencesAction_Block;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
