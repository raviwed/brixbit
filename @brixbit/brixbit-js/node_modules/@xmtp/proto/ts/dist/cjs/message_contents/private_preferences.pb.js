"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrivatePreferencesAction_Block = exports.PrivatePreferencesAction_Allow = exports.PrivatePreferencesAction = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "xmtp.message_contents";
function createBasePrivatePreferencesAction() {
    return { allow: undefined, block: undefined };
}
exports.PrivatePreferencesAction = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.allow !== undefined) {
            exports.PrivatePreferencesAction_Allow.encode(message.allow, writer.uint32(10).fork()).ldelim();
        }
        if (message.block !== undefined) {
            exports.PrivatePreferencesAction_Block.encode(message.block, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePrivatePreferencesAction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.allow = exports.PrivatePreferencesAction_Allow.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.block = exports.PrivatePreferencesAction_Block.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            allow: isSet(object.allow)
                ? exports.PrivatePreferencesAction_Allow.fromJSON(object.allow)
                : undefined,
            block: isSet(object.block)
                ? exports.PrivatePreferencesAction_Block.fromJSON(object.block)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.allow !== undefined &&
            (obj.allow = message.allow
                ? exports.PrivatePreferencesAction_Allow.toJSON(message.allow)
                : undefined);
        message.block !== undefined &&
            (obj.block = message.block
                ? exports.PrivatePreferencesAction_Block.toJSON(message.block)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBasePrivatePreferencesAction();
        message.allow =
            object.allow !== undefined && object.allow !== null
                ? exports.PrivatePreferencesAction_Allow.fromPartial(object.allow)
                : undefined;
        message.block =
            object.block !== undefined && object.block !== null
                ? exports.PrivatePreferencesAction_Block.fromPartial(object.block)
                : undefined;
        return message;
    },
};
function createBasePrivatePreferencesAction_Allow() {
    return { walletAddresses: [] };
}
exports.PrivatePreferencesAction_Allow = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.walletAddresses) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePrivatePreferencesAction_Allow();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.walletAddresses.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            walletAddresses: Array.isArray(object === null || object === void 0 ? void 0 : object.walletAddresses)
                ? object.walletAddresses.map((e) => String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.walletAddresses) {
            obj.walletAddresses = message.walletAddresses.map((e) => e);
        }
        else {
            obj.walletAddresses = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBasePrivatePreferencesAction_Allow();
        message.walletAddresses = ((_a = object.walletAddresses) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBasePrivatePreferencesAction_Block() {
    return { walletAddresses: [] };
}
exports.PrivatePreferencesAction_Block = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.walletAddresses) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePrivatePreferencesAction_Block();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.walletAddresses.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            walletAddresses: Array.isArray(object === null || object === void 0 ? void 0 : object.walletAddresses)
                ? object.walletAddresses.map((e) => String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.walletAddresses) {
            obj.walletAddresses = message.walletAddresses.map((e) => e);
        }
        else {
            obj.walletAddresses = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBasePrivatePreferencesAction_Block();
        message.walletAddresses = ((_a = object.walletAddresses) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=private_preferences.pb.js.map