{"version":3,"sources":["../../src/ScreenEffect.ts"],"names":["ContentTypeId","ContentTypeScreenEffect","ScreenEffectCodec","content","messageId","effectType"],"mappings":"AAAA,OAAS,iBAAAA,MAAqB,gBAKvB,IAAMC,EAA0B,IAAID,EAAc,CACvD,YAAa,wBACb,OAAQ,eACR,aAAc,EACd,aAAc,CAChB,CAAC,EAYYE,EAAN,KAEP,CACE,IAAI,aAA6B,CAC/B,OAAOD,CACT,CAEA,OAAOE,EAA+D,CACpE,MAAO,CACL,KAAMF,EACN,WAAY,CACV,UAAWE,EAAQ,UACnB,WAAYA,EAAQ,UACtB,EACA,QAAS,IAAI,UACf,CACF,CAEA,OACEA,EAC0B,CAC1B,GAAM,CAAE,UAAAC,EAAW,WAAAC,CAAW,EAAIF,EAAQ,WAE1C,MAAO,CACL,UAAAC,EACA,WAAAC,CACF,CACF,CAEA,UAAW,CAEX,CACF","sourcesContent":["import { ContentTypeId } from \"@brixbit/brixbit-js\";\nimport type { ContentCodec, EncodedContent } from \"@brixbit/brixbit-js\";\n\nexport type EffectType = \"SNOW\" | \"RAIN\";\n\nexport const ContentTypeScreenEffect = new ContentTypeId({\n  authorityId: \"experimental.brixbit.org\",\n  typeId: \"screenEffect\",\n  versionMajor: 1,\n  versionMinor: 0,\n});\n\nexport type ScreenEffect = {\n  messageId: string;\n  effectType: EffectType;\n};\n\nexport type ScreenEffectParameters = Pick<\n  ScreenEffect,\n  \"messageId\" | \"effectType\"\n>;\n\nexport class ScreenEffectCodec\n  implements ContentCodec<ScreenEffect | undefined>\n{\n  get contentType(): ContentTypeId {\n    return ContentTypeScreenEffect;\n  }\n\n  encode(content: ScreenEffect): EncodedContent<ScreenEffectParameters> {\n    return {\n      type: ContentTypeScreenEffect,\n      parameters: {\n        messageId: content.messageId,\n        effectType: content.effectType,\n      },\n      content: new Uint8Array(),\n    };\n  }\n\n  decode(\n    content: EncodedContent<ScreenEffectParameters>,\n  ): ScreenEffect | undefined {\n    const { messageId, effectType } = content.parameters;\n\n    return {\n      messageId,\n      effectType,\n    };\n  }\n\n  fallback() {\n    return undefined;\n  }\n}\n"]}