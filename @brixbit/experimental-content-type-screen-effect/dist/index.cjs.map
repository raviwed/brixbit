{"version":3,"sources":["../src/ScreenEffect.ts"],"names":[],"mappings":";AAAA,SAAS,qBAAqB;AAKvB,IAAM,0BAA0B,IAAI,cAAc;AAAA,EACvD,aAAa;AAAA,EACb,QAAQ;AAAA,EACR,cAAc;AAAA,EACd,cAAc;AAChB,CAAC;AAYM,IAAM,oBAAN,MAEP;AAAA,EACE,IAAI,cAA6B;AAC/B,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,SAA+D;AACpE,WAAO;AAAA,MACL,MAAM;AAAA,MACN,YAAY;AAAA,QACV,WAAW,QAAQ;AAAA,QACnB,YAAY,QAAQ;AAAA,MACtB;AAAA,MACA,SAAS,IAAI,WAAW;AAAA,IAC1B;AAAA,EACF;AAAA,EAEA,OACE,SAC0B;AAC1B,UAAM,EAAE,WAAW,WAAW,IAAI,QAAQ;AAE1C,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EAEA,WAAW;AACT,WAAO;AAAA,EACT;AACF","sourcesContent":["import { ContentTypeId } from \"@brixbit/brixbit-js\";\nimport type { ContentCodec, EncodedContent } from \"@brixbit/brixbit-js\";\n\nexport type EffectType = \"SNOW\" | \"RAIN\";\n\nexport const ContentTypeScreenEffect = new ContentTypeId({\n  authorityId: \"experimental.brixbit.org\",\n  typeId: \"screenEffect\",\n  versionMajor: 1,\n  versionMinor: 0,\n});\n\nexport type ScreenEffect = {\n  messageId: string;\n  effectType: EffectType;\n};\n\nexport type ScreenEffectParameters = Pick<\n  ScreenEffect,\n  \"messageId\" | \"effectType\"\n>;\n\nexport class ScreenEffectCodec\n  implements ContentCodec<ScreenEffect | undefined>\n{\n  get contentType(): ContentTypeId {\n    return ContentTypeScreenEffect;\n  }\n\n  encode(content: ScreenEffect): EncodedContent<ScreenEffectParameters> {\n    return {\n      type: ContentTypeScreenEffect,\n      parameters: {\n        messageId: content.messageId,\n        effectType: content.effectType,\n      },\n      content: new Uint8Array(),\n    };\n  }\n\n  decode(\n    content: EncodedContent<ScreenEffectParameters>,\n  ): ScreenEffect | undefined {\n    const { messageId, effectType } = content.parameters;\n\n    return {\n      messageId,\n      effectType,\n    };\n  }\n\n  fallback() {\n    return undefined;\n  }\n}\n"]}